Application Load Balancer (EC2 콘솔에 속함)
- Elastic Load Balancer
  1. Classic Load Balancer
  2. Application Load Balancer
- Classic Load Balancer 보다 더 많은 프로토콜이 지원되며, CloudWatch 지표, 엑세스 로그, 상태 확인이 더 지원됨
- 추가된 기능 : 경로 및 호스트 기반 라우팅, 
- 들어오는 요청을 포트별로 구분하여 특정 EC2 인스턴스에 보내도록 라우팅 설정이 가능
- Application Load Balancer 를 사용하려면 최소한 2개의 가용 영역을 선택해야 함
- target group

Auto Scaling
- 어플리케이션의 로드를 처리 할 수 있는 적절한 EC2 인스턴스 용량 조절
- CloudWatch를 이용하여 워크로드 실적을 모니터링하는 것이 중요
- Auto Scaling은 지정한 조건에 따라 EC2 인스턴스를 추가하거나 제거할 수 있음
- Auto Scaling은 성능 요구사항이 변동하는 환경에서 특히 강력함 -> 비용을 최적화 할 수 있음
- 확장성(필요한 만큼 늘릴 수 있다) / 자동화(워크로드에 따라 자동으로 변경할 수 있다)
- 스케일 아웃 : 더 많은 인스턴스를 추가하는 것
- 스케일 인 : 인스턴스를 종료하는 것
- Auto Scaling은 시작구성, Auto Scaling 그룹, Auto Scaling 정책 으로 구성되어 있음
- 시작구성(Launch Configuration) (무엇을 대상으로 하는가)
  Auto Scaling에 의해 EC2 인스턴스를 추가할 때 필요한 EC2의 설정에 대한 정의
  EC2 인스턴스를 콘솔에서 실행할 때 지정해야 하는 모든 사항을 포함
- Auto Scaling 그룹 (어디에서 동작할 것인가, 어떤 범위에서 동작할 것인가)
  VPC, 로드밸런서, 최소 인스턴스, 최대 인스턴스 등
- Auto Scaling 정책 (언제 동작할 것인가)
  인스턴스를 추가하거나 종료하는 조건을 지정
  예약(특정 일자등), 온디맨드, 확장정책, 축소정책
- Auto Scaling의 일반적인 구성은 EC2 혹은 Elastic Load Balancer의 성능 정보를 기반으로 CloudWatch 경보를 설정하여
  설정한 임계값을 넘는 경우 CloudWatch 에서 인스턴스 확장/축소하는 이벤트를 트리거

Amazon Route 53
- 도메인 등록
- 글로별 고가용성 DNS 서비스
- 퍼블릭 및 프라이빗 DNS 이름
- 다중 라우팅 알고리즘 제공
- IPv4, IPv6 모두 지원
- 다른 AWS 클라우드 서비스와 통합
- Route 53을 사용하려면
  가장 먼저 호스팅 영역(Hosted Zone)을 생성 -> DNS 데이터가 유지되는 곳
- 단순 라우팅 뿐 아니라, 장애조치, 가중치기반 라운드 로빈, 지리적 위치, 지연시간 기반 라우팅, 다중 응답등 다양한 기능이 제공 됨

Amazon Relational Database Services (RDS)
- 클라우드에서 관계형 데이터베이스를 설정하고 운영하는 관리형 서비스
- 애플리케이션에만 집중할 수 있도록
  필요한 성능, 고가용성, 보안 및 호환성을 제공
- 데이터 및 어플리케이션 최적화에 집중할 수 있음
- 다중 AZ 배포로 고가용성 데이터베이스 인스턴스를 구성할 수 있음
  -> 동기식 복제 (트랜잭션이 대기 사본으로 동시에 복제됨)
  -> 장애 발생시 자동으로 체인지
- 동일 AZ 내에서 읽기 전용 복제본 사용하는 경우 소스 데이터베이스의 부하를 줄일 수 있음
  -> 읽기 중심의 데이터베이스 워크로드에 적합
  -> 비동기식 복제
  -> 장애 발생시 수동으로 체인지
  -> 읽기전용 복제본을 마스터와 다른 리전에 생성도 가능하면 이 경우 재해 복구 요구 사항을 충족학거나
     사용자와 가까운 읽기전용 복제본으로 읽기를 보내 지연 시간을 줄일 수 있음
- 데이터베이스 컴퓨팅 및 스토리지 리소스를 다운타임 없이 확장 가능

AWS Lambda
- AWS는 이벤트 중심의 서버리스 컴퓨팅 서비스
- AWS Lambda는 서버를 프로비저닝 하거나 관리하지 않고도 코드를 실행할 수 있도록 지원하는 컴퓨팅 서비스
  AWS Lambda는 필요한 경우에만 코드를 실행하고 초당 수천개의 요청으로 자동으로 확장됨
- 장점
  사용하는 컴퓨팅에 대해서만 비용 지불 -> 간헐적인 가변 워크로드에 적합함
  관리작업 전혀 없이 코드를 실행할 수 있음
- AWS Lambda는 이벤트 중심의 컴퓨팅에 사용할 수 있음

- api gateway? kinesis?

AWS Elastic Beanstalk
- 어플리케이션을 클라우드로 신속하게 전환하려면 어떻게 해야 하나?
  어떻게 하면 신속하게 전체 환경을 준비 할 수 있을까?
- AWS Elastic Beanstalk은 Platform as a Service
- 애플리케이션을 빠르게 배포할 수 있음
- 관리의 복잡성을 줄여줌
- 작성한 코드를 클라우드에서 실행할 수 있게 해주는 서비스
  (EC2, VPC..등의 설정을 개별로 해줄 필요 없음)

Amazon Simple Notification Service (SNS)
- 사용자 or microservice or application 등.. 에게 nofi
- 분리된 시스템(microservice) 간에 메세지를 전송하는 시스템
- 유연한 완전관리항 게시/구독 메시징 및 모바일 통신 서비스
- 구독중인 엔드포인트/클라이언트 별로 메시지 전달을 조정할 수 있음
- 안정적인 통신을 손쉽게 설정, 운영할 수 있음
- 마이크로서비스, 분산 시스템 및 서버리스 애플리케이션을 분리 및 확장 할 수 있음
- 사용자 or microservice or application 등.. 에게 nofi

Amazon CloudWatch
- AWS에서 실행하는 Amazon Web Service(AWS) 리소스와 애플리케이션을 실시간으로 모니터링하는 서비스
- 지표 수집 및 추적, 로그 파일 수집 및 모니터링
  -> 경보를 설정하여
  -> 알람을 보내거나, 다른 자동화된 조치를 취할 수 있음 (Auto Scaling 트리거, AWS Lambda 실행, EBS 볼륨 스냅샷 등)
- CloudWatch를 사용하면 시스템 전체의 리소스 사용률, 애플리케이션 성능 및 운영상태를 파악할 수 있음
- 구성요소 : 지표(Matrics), 경보, 이벤트, 로그, 대시보드
  몇몇 리소스(EC2, EBS, RDS등)은 무료 지표를 제공
  자체 애플리케이션 지표를 추가하려면 추가 비용 발생
- AWS management console 에서 모든 지표 확인 가능
- cron / rate 표현식을 이용하여 특정 시간에 자동으로 트리거되는 자동화 작업 예약 가능
- AWS CloudTrail 에서 로깅한 이벤트를 모니터링 할 수 있음
  CloudTrail 이벤트는 계정내에서 발생하는 모든 API 작업을 의미
- 대시보드에서는 다른 리전에 있는 리소스를 모아서 모니터링 할 수 있음

Amazon CloudFront
- CDN(Contetns Delivery Network)
- 규모를 확장하고 비용을 절감하며 애플리케이션 성능을 향상 할 수 있게 해주는 AWS 서비스
- 기본적으로 CloudFront를 사용하면 전 세계에 있는 여러 location(위치)를 이용하여
  콘텐츠를 전송하고, 사용자는 보다 짧은 지연시간으로 애플리케이션과 상호작용할 수 있음
- CloudFront를 사용하면 외부 데이터 전송시 낮은 요금 때문에 비용을 절감할 수 있음
- CloudFront는 고가용성을 유지하도록 해준다. 웹 서버 충돌과 같이 원본에서 문제가 발생하는 경우
  웹 서버를 중지해도 콘텐츠는 캐시에서 계속 제공이 가능

AWS CloudFormation
- AWS 리소스 프로비저닝 자동화를 위한 서비스
  : 완전 관리형 서비스, 스택에서 리소스를 생성, 업데이트, 삭제
- 애플리케이션을 구동하는 관련 리소스 그룹을 예상한대로 반복적으로 생성하는 작업을 자동화 및 간소화 하게 해준다.
  '예상한대로 반복해서' -> 키워드
- 워크로드에 대한 가상환경 구성(VPC설정, DB연결, EC2 생성등)을 자동화하고 복제한다.
- AWS CloudFormation는 템플릿 파일을 읽어서 템플릿에 나열된 리소스를 구성한다.
  이러한 프로세스의 결과물을 스택이라고 한다.
  스택 : 템플릿에 의해 생성된 리소스이며 배포 단위를 의미한다. 스택 생성후 수정된 템플릿을 실행하여 스텍을 업데이트 할 수 있다.
- CloudFormation을 사용하는 경우 동일한 템플릿을 사용하여 파라미터만 다르게 하여
  개발환경 / 프로덕션 환경을 구축할 수 있다.
- CloudFormation을 실행하는데 있어서 중요한 것은
  1. 템플릿 : 템플릿에 에러가 없어야 함
  2. 권한 : 템플릿을 실행하는 사람은 템플릿에서 참조하는 모든 서비스에 대한 권한이 있어야 한다.
