도메인 1: 클라우드 개념 (26%)
1.1 AWS 클라우드 및 가치 제안 정의
1.2 AWS 클라우드의 경제적 측면 파악
1.3 클라우드 아키텍처의 다양한 설계 원리 나열




# Amazon Web Service 개요

클라우드 컴퓨팅이란 인터넷에서 종량 요금제 방식으로 클라우드 서비스 플랫폼을 통해
컴퓨팅 파워, 데이터베이스 스토리지, 애플리케이션, 기타 IT 리소스를 온디맨드로 제공하는 서비스를 의미한다.
- IT 애플리케이션 리소스를 온디맨드로 제공하는 서비스

클라우드 컴퓨팅의 주요 이점 중 하나는 초기 기본 인프라 비용을 비즈니스에 맞춰 조정되는 저렴한 가변비용으로 대체할 수 있는 기회가 된다는 점이다.

클라우드 컴퓨팅의 여섯 가지 이점
- 자본 비용을 가변 비용으로 대체
- 규모의 경제로 얻게 되는 이점
- 용량 추정 불필요
- 속도 및 민첩성 개선
- 데이터 센터 운영 및 유지관리에 비용 투자 불필요
- 몇 분만에 전 지역으로 확대 됨

클라우드 컴퓨팅 유형
- 클라우드 컴퓨팅 모델
  - Infrastructure as a Service (IaaS)
  - Platform as a Service (PaaS)
  - Software as a Service (SaaS)
- 클라우드 컴퓨팅 배포 모델
  - Cloud
  - Hybrid
  - On-premises

AWS 클라우드 인프라는 리전 및 가용 영역(AZ)을 중심으로 구축된다.
리전은 전 세계에 분산된 물리적 위치로서 여러 AZ가 운영됨.
AZ는 하나 이상의 개별 데이터 센터로 구성되며
각 데이터 센터는 분리된 시설에 구축되고 중복 전력, 네트워킹 및 연결성을 갖추고 있다.
이러한 AZ를 사용하면 단일 데이터 센터에서 기대 할 수 있는 것 보다 더 높은 가용성, 내결함성 및 확장성을 지닌 프로덕션 애플리케이션과 데이터베이스를 운영할 수 있다.

각 Amazon 리전은 다른 Amazon 리전에서 완전히 격리되도록 구성되었습니다.
이를 통해 가장 강력한 내결함성 및 안정성을 달성할 수 있습니다.

----------------------------------------------------------------------------------------------------------------
클라우드 컴퓨팅에서는 자체 데이터 센터를 설계하고 구축하는 대신 인터넷을 통해 데이터 센터 및 해당 리소스에 접근
따라서 최악의 시나리오를 대비하여 설계할 필요 없이 실제 필요에 따라 리소스를 확장 또는 축소 가능

유한한 고정 IT 인프라의 경직성과 제약에서 벗어날 수 있음 -> 민첩성 및 효율성이 향상 / 확장성

위험축소
- 대규모 IT 환경 구축을 하지 않아도 되기 때문에 대규모 투자의 실패 위험을 줄일 수 있다.

보안위험 
- 주기적인 테스트와 패치를 수행

확장성
- 필요에 따라 리소스의 크기를 조정할 수 있음
탄력성
- 컴퓨팅 리소스 규모를 쉽게 확장하거나 축소할 수 있는 기능
안정성
- 시스템이 인프라 또는 서비스 장애를 복구하는 능력
- 클라우드 컴퓨팅에서는 컴퓨팅 리소스를 확보하여 수요를 충족하고 중단을 완화하는 능력
- AWS 클라우드의 핵심 구성 요소 -> 전세계 리전에서 호스팅 되는 이유

리전은 가용 영역이라는 격리된 위치가 여러 개 있는 개별 지리 영역이다
가용 영역은 하나 이상의 개별 데이터 센터로 구성
각 데이터 센터는 분리된 시설에 구축 -> 중복 전력, 네트워킹, 연결이 제공

내결함성
시스템의 일부 구성요소가 작동하지 않더라도 해당 시스템이 계속 작동할 수 있는 기능을 의미

고가용성
시스템이 항상 작동하고 엑세스 가능하며 사람의 개입 없이 중단 시간을 가능한 한 최소화 하는 것

고객의 데이터 보안
Amazon의 최우선 과제, 
멀티 팩터 엑세스 제어 시스템을 사용

AWS 클라우드는 높은 가용성과 신뢰성을 제공하도록 설계된 확장 가능한 컴퓨팅 플랫폼을 제공하며
이를 통해 고객이 다양한 애플리케이션을 수행할 수 있는 수단을 제공

AWS 시설은 전세계에 분포되어 있기 때문에 전세계에 있는 고객에 있는 곳에 데이터센터를 배치할 수 있음




=======================



AWS Well-Architectured 프레임워크
- 아키텍쳐 설계를 위한 5가지 핵심요소
  보안, 안정성, 성능 효율성, 비용 최적화, 운영 우수성
- 보안 핵심요소
  : Identity and Access Management(IAM)
  : 탐지 제어 (detive control) - 로그 캡쳐, 분석, 검사 제어 통합등 잠재적인 보안 문제를 식별하는 데 사용할 수 있음
  : 인프라 보호 - 아키텍쳐 내의 시스템과 서비스를 의도하지 않은 무단 액세스로부터 보호 한다
  : 데이터 보호 - 데이터 분류, 암호화, 저장 및 전송 데이터 보호, 데이터 백업, 복제 및 복구 등.. 다양한 방법이 있음
  : 인시던트 대응 - 잠재적인 보안 인시던트에 대응하고 완화하기 위한 인시던트 대응 프로세를 만들어야 함
- 보안 핵심요소 : 설계 원칙
  : 모든 계층에서 보안 구현 - AWS 를 사용하면 리소스 내 및 리소스 간에도 보안을 구현할 수 있음
  : 추적 가능성 활성화 - 모든 작업, 환경에 대한 모든 변경 사항을 로깅 및 감시해야 함
  : 최소 권한의 원칙 적용 - 기본적으로 자사 환경의 권한 부여가 적절해야 하고 AWS 리소스에 대한 강력한 논리적 엑세스 제어를 구현해야 함
  : 시스템 보안에 집중 - 고객은 애플리케이션 데이터 및 운영 체제의 보안에 신경쓰고, AWS는 안전한 인프라 및 서비스를 제공한다.
  : 자동화 - 보안 모범 사례를 자동화 해야 함
    예시) 패치가 적용되고 강화된 가상 서버의 이미지를 생성하고 저장
        -> 그런 다음 해당 이미지가 필요할 때 이미 강화되고 패치가 적용된 동일한 이미지를 사용하여 새로운 인스턴스를 자동으로 생성할 수 있음
- 안정성 핵심요소 (컴퓨팅 리소스를 동적으로 확보하여 수요를 충족하고 운영 중단을 최소화 하는 기능에 중점을 둔다.)
  : 문제/장애로부터 복구 - 
  : 기초, 변경 관리, 장애 관리 영역에 모범 사례 적용 - 
  : 장애를 예상, 대응 및 방지 - 

  : foundation(기반), Change Management(변경 관리), Failure Management(장애 관리)
  : 안정성을 실현하려면 아키텍처와 시스템이 수요의 변화나 요구사항을 처리할 수 있는 잘 계획된 기반을 갖추고 있어야 하며
    또한 장애를 탐지하고 문제가 발생한 경우 자동으로 자가 복구를 수행할 수 있어야 한다.
  
  : 어떤 시스템이든 설계하기 전에 안정성에 영향을 미치는 기본 요구사항이 준비되어 있어야 한다.
  : 변경관리에서는 변경이 시스템에 미치는 영향을 충분히 이해하고 인지하는 것이 중요하다.
    시스템을 선제적으로 계획하고 모니터링 하는 경우 신속하고 안정적으로 변경을 수용하고 이에 적응할 수 있다.
  : 아키텍쳐의 안정성을 보장하기 위해서는 장애 발생을 예측하고 인지하고 대응하고 예방하는 것이 중요하다.
    클라우드 환경에서는 모니터링을 통해 자동화의 이점을 활용하고, 환경의 시스템을 교체할 수 있고, 나중에 장애가 발생한 시스템의 문제를 해결할 수 있으며,
    이 모든 것을 저렴한 비용으로 그리고 시스템을 계속 안정적으로 유지하면서 수행할 수 있다.
- 안정성 핵심 요소 : 설계 원칙
  : 복구 절차 테스트 - 실제 장애가 발생하기 전에 복구 절차가 잘 동작하는지 테스트할 수 있다.
  : 자동 복구 - 임계값이 초과될 때 자동 응답을 트리거할 수 있다. 이렇게 하면 장애가 발생하기 전에 미리 예측하고 조치를 취할 수 있다.
  : 수평 확장 - 전체 시스템 가용성을 높이기 위해 수평으로 확장해야 한다. 단일 장애 지점이 전체 시스템에 미치는 영향을 줄여야 한다.
              수평으로 확장하고 여러 개의 소규모 리소스로 요구 사항을 분산하는 것이 목표이다.
  : 용량 추정(추측) 중단 - 클라우드에서는 수요와 시스템 사용률을 모니터링한 다음 리소스 추가 또는 제거를 자동화 할 수 있다.
                       이를 통해 오버프로비저닝하거나 언더프로비저닝하지 않고도 언제든지 수요를 충족할 수 있는 최적의 수준을 확보할 수 있다.
  : 변경 관리 자동화 - 아키텍쳐 및 인프라에 대한 변경 사항은 자동화를 사용하여 적용해야 한다.
                   그러면 개별 시스템이나 리소스가 아니라 자동화 시스템의 변경 사항만 관리하면 된다.
- 성능 효율성 핵심요소
  : 맞춤형 솔루션 선택(selection) - 
  : 지속적인 혁신에 대한 검토(review) - 
  : AWS 서비스 모니터링(monitoring) - 
  : 장단점 고려(trade-off) - 일관성, 내구성 및 공간과 시간 또는 지연 시간을 절충하여 원하는 최고의 성능을 제공
- 성능 효율성 핵심요소 : 설계원칙
  : 고급 기술을 대중화 - 구현하기 어려운 고급기술을 클라우드에서 제공하는 서비스로 소비하라
  : 몇 분 만에 전 세계에 배포 - 
  : 서버리스 아키텍쳐 사용 - 운영 부담도 해소되고, 트랜잭션 비용도 절감할 수 있다.
  : 실험을 자주 해야 한다 - 가상화를 통해 테스트를 수행하여 효율성을 향상할 수 있다.
  : 기계적 동조 - 달성하고자 하는 목표에 가장 잘 맞는 기술적 접근 방식을 사용한다.
- 비용 최적화 핵심 요소 (완전히 비용 최적화된 시스템은 기능 요구 사항을 충족하는 동시에 가능한 가장 저렴한 비용으로 최상의 결과를 얻기 위해 가지고 있는 모든 리소스를 사용한다)
  : 비용 효율적인 리소스 사용 - 
  : 수요와 공급의 균형 - 클라우드 아키텍쳐의 탄력성을 이용하여 변화하는 요구사항을 충족할 수 있다.
  : 지출에 대한 인식 증가 - 현재 비용을 확인, 이해 및 분석하고, 향후 비용을 예측하고, 그에 따라 계획할 수 있는 기능을 갖추면 AWS에서 아키텍쳐의 비용 최적화를 강화할 수 있다.
  : 시간이 지남에 따라 최적화할 수 있다 - AWS 플랫폼에서 수집한 데이터를 통해 아키텍처를 측정, 모니터링 및 개선할 수 있다.
- 비용 최적화 핵심 요소 : 설계원칙
  : 소비 모델 채택 - 사용하는 컴퓨팅 리소스에 대한 비용만 지불한 다음 비즈니스 요구사항에 따라 늘리거나 줄이면 된다.
  : 전반적인 효율성 측정 - 
  : 데이터 센터 운영 비용 절감 - AWS를 사용해라. IT 인프라에 신경쓰지 말고 고객과 비즈니스 프로젝트에 집중해라.
  : 지출 분석 및 귀속 - 클라우드를 사용하면 시스템의 사용량 및 비용을 더 간단하고 정확하게 파악할 수 있다.
  : 관리형 서비스 사용 - 이메일 서버, DB 서버 관리등과 같은 서버를 유지 관리 하는 운영 부담을 없에기 위해 AWS에서는 관리형 서비스를 제공한다.
    클라우드는 대규모로 하기 때문에 트랜잭션 또는 서비스당 더 낮은 비용을 제시할 수 있다.(AWS를 써라)
- 운영 우수성 핵심 요소 (운영 및 모니터링 시스템을 통해 지속적으로 프로세스와 절차를 개선하면서 비즈니스 가치를 제공하는데 중점을 둔다.)
  : 변경을 관리 및 자동화
  : 이벤트에 대응
  : 표준 정의 - 일상적인 작업을 성공적으로 관리하기 위한 표준 정의

내결함성(Fault Tolerance) 및 고가용성(High Available)
- 내결함성
  : 시스템의 일부 구성 요소가 작동하지 않더라도 시스템이 계속 작동할(운영될) 수 있는 기능을 의미
  : 애플리케이션 구성 요소의 내장된 중복성
- 고가용성 (전체 시스템에 대한 개념)
  : 시스템이 일반적으로 작동하며 액세스 할 수 있음
  : 가동 중단 시간이 최소화 됨
  : 최소한의 인적 개입이 필요
  : 최소한의 사전 금융 투자

  : 사람이 개입하지 않아도 시스템이 항상 작동하며 액세스 가능하며 가동 중지를 최소화 하도록 보장하는 것
- 이 모든 것을 AWS 를 통해서 할 수 있음 (AWS를 사용해야 하는 이유....)
- 고가용성 서비스 도구
  : Elastic Load Balancer - 
  : 탄력적 IP 주소 - 
  : Amazone Route 53 - 
  : Auto Scaling - 
  : Amazone CloudWatch - 
- Elastic Load Balancer
  : 수신 트래픽(로드) 분산
  : CloudWatch로 지표 전송
  : 트리거 / 알림 (긴 지연시간, 과다 사용률)
- 탄력적 IP 주소 (애플리케이션의 내결함성을 향상시킬 때 유용)
  : 고정 IP 주소
  : 장애 조치 (발생할 경우)
  : 인스턴스에 장애가 발생할 경우 애플리케이션에 계속 액세스할 수 있도록 함
    (하나의 인스턴스가 중지해도 동일한 IP 로 다른 인스턴스에 접근할 수 있기 때문에 고가용성이 보장됨)
- Amazone Route 53
  : 신뢰할 수 있는 DNS 서비스 (도메인 이름을 IP 주소로 변환)
  : 지원기능 - 단순 라우팅, 지연 시간 기반 라우팅, 상태 확인, DNS 장애 조치, 지리적 위치 라우팅
- Auto Scaling
  : 인스턴스 종료 및 시작
  : 용량을 조정하거나 수정하도록 지원
  : 온디맨드로 새로운 리소스 생성
- Amazone CloudWatch
  : 분산 통계 수집 시스템
  : 인프라의 지표 수집/추적
  : 자체 사용자 지정 지표(Custom Matrics)를 생성 및 사용
  : Auto Scaling 과 함께 사용됨
- 내결함성 도구
  : Amazone Simple Queue Service
  : Amazone Simple Storage Service
  : Amazone Relational Database Service
- Amazone Simple Queue Service
  : 내결함성 애플리케이션의 백본으로 사용할 수 있음
  : 매우 안정적인 분산 메시징 시스템
  : 대기열을 항상 사용할 수 있도록 도와준다.
- Amazone Simple Storage Service
  : 내구성과 결함성이 뛰어난 데이터 스토리지를 제공
  : 리전 내 여러 시설에 여러 다른 디바이스의 모든 데이터를 중복 저장한다.
- Amazone Relational Database Service
  : 관게형 데이터베이스를 설정, 운영 및 확장하는 또 다른 웹 서비스 도구
  : 중요한 데이터베이스의 안정성을 향상시키는 기능을 제공하여 고가용성과 내결함성을 지원 (자동 백업, 스냅샷, 여러 가용 영역 배포 등)

- AWS를 사용하면 제공된 서비스와 도구를 시용하여 내결함성 및 고가용성 아키텍쳐를 구축할 수 있다.

웹호스팅
- AWS 클라우스에서의 웹 호스팅은 빠르고 쉬우며 비용이 저렴하다.
- 컴퓨팅, 스토리지, 데이터베이스, 애플리케이션 서비스에 AWS 서비스를 사용하여 솔루션을 손쉽게 배포하고 유지할 수 있다.
